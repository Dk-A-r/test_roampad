# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Overwrite Repository

on:
  workflow_dispatch:

defaults:
  run:
    working-directory: ./my-ml-package

#Enable docker services with dind
jobs:
  generate-notebook:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Make your changes
      - name: Install dependencies
        run: |
          pip install -r requirements.txt --upgrade pip setuptools wheel twine

      # Step 3: Login in Gitlab Registry
      - name: Log in to GitLab Container Registry
        run: |
          echo "${{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }}" | docker login registry.gitlab.com -u "${{ secrets.GITLAB_USERNAME }}" --password-stdin
          echo "Login completed successfully"

      # Step 4: Build image for generation
      - name: Build image
        run: |
          docker build -t notebook-generator .

      # Step 5: Generate NB in container
      - name: Generate NB
        run: |
          docker run -v .:/app notebook-generator

      # Step 6: Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 7: Add, Commit, and Push
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add -A
          git commit -m "CI/CD: Overwrite repository with new changes"
          git push origin main

      # Step 8: Tag image for Gitlab Registry
      - name: Tag Docker image
        run: |
          docker tag notebook-generator:latest registry.gitlab.com/${{ secrets.GITLAB_USERNAME }}/dummy_repo/notebook-generator:latest

      # Step 9: Push Docker image to Gitlab Registry
      - name: Push Docker image
        run: |
          docker push registry.gitlab.com/${{ secrets.GITLAB_USERNAME }}/dummy_repo/notebook-generator:latest

      # Step 10: Build project package
      - name: Build Python Package
        run: |
          python setup.py sdist bdist_wheel

      # Step 11: Push package into Gitlab Packages
      - name: Publish Package on Gitlab
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }}
        run: |
          twine upload --repository-url https://gitlab.com/api/v4/projects/66270948/packages/pypi dist/*

      # Step 12: Pages
      - name: Pages publication
        env:
          GITLAB_USERNAME: ${{ secrets.GITLAB_USERNAME }}
          GITLAB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }}
        run: |
          mkdir -p public
          cd public
          jupyter nbconvert --execute --to html ../start_note.ipynb
          git clone https://${GITLAB_USERNAME}:${GITLAB_PERSONAL_ACCESS_TOKEN}@gitlab.com/dkarpov.legal/dummy_repo.git gitlab-repo
          cd gitlab-repo
          
          git checkout -B pages
          mkdir -p public
          ls ..
          cp -r ../public/* ./public

          git add -A
          git commit -m "Publish static site from GitHub Actions"
          git push origin pages
          

